g0pA_taska.txt
in object oriented programming inheritance is a way to form new classes instances of which are called objects using classes that have already been defined the inheritance concept was invented in 1967 for simula  the new classes known as derived classes take over or inherit attributes and behavior of the pre existing classes which are referred to as base classes or ancestor classes  it is intended to help reuse existing code with little or no modification  inheritance provides the support for representation by categorization in computer languages categorization is a powerful mechanism number of information processing crucial to human learning by means of generalization what is known about specific entities is applied to a wider group given a belongs relation can be established and cognitive economy less information needs to be stored about each specific entity only its particularities  inheritance is also sometimes called generalization because the is a relationships represent a hierarchy between classes of objects for instance a fruit is a generalization of apple  orange  mango and many others one can consider fruit to be an abstraction of apple orange etc conversely since apples are fruit i e  an apple is a fruit  apples may naturally inherit all the properties common to all fruit such as being a fleshy container for the seed of a plant  an advantage of inheritance is that modules with sufficiently similar interfaces can share a lot of code reducing the complexity of the program inheritance therefore has another view a dual called polymorphism which describes many pieces of code being controlled by shared control code inheritance is typically accomplished either by overriding replacing one or more methods exposed by ancestor or by adding new methods to those exposed by an ancestor  complex inheritance or inheritance used within a design that is not sufficiently mature may lead to the yo yo problem
orig_taska.txt
inheritance is a basic concept of object oriented programming where the basic idea is to create new classes that add extra detail to existing classes this is done by allowing the new classes to reuse the methods and variables of the existing classes and new methods and classes are added to specialise the new class inheritance models the is kind of relationship between entities or objects  for example postgraduates and undergraduates are both kinds of student this kind of relationship can be visualised as a tree structure where student would be the more general root node and both postgraduate and undergraduate would be more specialised extensions of the student node or the child nodes  in this relationship student would be known as the superclass or parent class whereas  postgraduate would be known as the subclass or child class because the postgraduate class extends the student class  inheritance can occur on several layers where if visualised would display a larger tree structure for example we could further extend the postgraduate node by adding two extra extended classes to it called  msc student and phd student as both these types of student are kinds of postgraduate student this would mean that both the msc student and phd student classes would inherit methods and variables from both the postgraduate and student classes

['a', 'adding', 'and', 'are', 'as', 'be', 'because', 'between', 'by', 'called', 'can', 'classes', 'concept', 'entities', 'existing', 'for', 'in', 'inherit', 'inheritance', 'is', 'it', 'known', 'methods', 'more', 'new', 'object', 'objects', 'of', 'or', 'oriented', 'programming', 'reuse', 'that', 'the', 'to'] 35
['1967', 'a', 'about', 'abstraction', 'accomplished', 'adding', 'advantage', 'all', 'already', 'also', 'an', 'ancestor', 'and', 'another', 'apple', 'apples', 'applied', 'are', 'as', 'attributes', 'base', 'be', 'because', 'been', 'behavior', 'being', 'belongs', 'between', 'by', 'called', 'can', 'categorization', 'classes', 'code', 'cognitive', 'common', 'complex', 'complexity', 'computer', 'concept', 'consider', 'container', 'control', 'controlled', 'conversely', 'crucial', 'defined', 'derived', 'describes', 'design', 'dual', 'e', 'each', 'economy', 'either', 'entities', 'entity', 'established', 'etc', 'existing', 'exposed', 'fleshy', 'for', 'form', 'fruit', 'generalization', 'given', 'group', 'has', 'have', 'help', 'hierarchy', 'human', 'i', 'in', 'information', 'inherit', 'inheritance', 'instance', 'instances', 'intended', 'interfaces', 'invented', 'is', 'it', 'its', 'known', 'languages', 'lead', 'learning', 'less', 'little', 'lot', 'mango', 'many', 'mature', 'may', 'means', 'mechanism', 'methods', 'modification', 'modules', 'more', 'naturally', 'needs', 'new', 'no', 'not', 'number', 'object', 'objects', 'of', 'one', 'only', 'or', 'orange', 'oriented', 'others', 'over', 'overriding', 'particularities', 'pieces', 'plant', 'polymorphism', 'powerful', 'pre', 'problem', 'processing', 'program', 'programming', 'properties', 'provides', 'reducing', 'referred', 'relation', 'relationships', 'replacing', 'represent', 'representation', 'reuse', 'seed', 'share', 'shared', 'similar', 'simula', 'since', 'sometimes', 'specific', 'stored', 'such', 'sufficiently', 'support', 'take', 'that', 'the', 'therefore', 'those', 'to', 'typically', 'used', 'using', 'view', 'was', 'way', 'what', 'which', 'wider', 'with', 'within', 'yo'] 170
['a', 'add', 'added', 'adding', 'allowing', 'and', 'are', 'as', 'basic', 'be', 'because', 'between', 'both', 'by', 'called', 'can', 'child', 'class', 'classes', 'concept', 'could', 'create', 'detail', 'display', 'done', 'entities', 'example', 'existing', 'extend', 'extended', 'extends', 'extensions', 'extra', 'for', 'from', 'further', 'general', 'idea', 'if', 'in', 'inherit', 'inheritance', 'is', 'it', 'kind', 'kinds', 'known', 'larger', 'layers', 'mean', 'methods', 'models', 'more', 'msc', 'new', 'node', 'nodes', 'object', 'objects', 'occur', 'of', 'on', 'or', 'oriented', 'parent', 'phd', 'postgraduate', 'postgraduates', 'programming', 'relationship', 'reuse', 'root', 'several', 'specialise', 'specialised', 'structure', 'student', 'subclass', 'superclass', 'that', 'the', 'these', 'this', 'to', 'tree', 'two', 'types', 'undergraduate', 'undergraduates', 'variables', 'visualised', 'we', 'where', 'whereas', 'would'] 95
