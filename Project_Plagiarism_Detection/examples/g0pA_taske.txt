g0pA_taske.txt
in mathematics and computer science dynamic programming is a method of solving problems that exhibit the properties of overlapping subproblems and optimal substructure described below  the method takes much less time than naive methods the term was originally used in the 1940s by richard bellman to describe the process of solving problems where one needs to find the best decisions one after another by 1953 he had refined this to the modern meaning the field was founded as a systems analysis and engineering topic that is recognized by the ieee bellman s contribution is remembered in the name of the bellman equation a central result of dynamic programming which restates an optimization problem in recursive form the word programming in dynamic programming has no particular connection to computer programming at all and instead comes from the term mathematical programming  a synonym for optimization thus the program is the optimal plan for action that is produced for instance a finalized schedule of events at an exhibition is sometimes called a program programming in this sense means finding an acceptable plan of action an algorithm optimal substructure means that optimal solutions of subproblems can be used to find the optimal solutions of the overall problem for example the shortest path to a goal from a vertex in a graph can be found by first computing the shortest path to the goal from all adjacent vertices and then using this to pick the best overall path as shown in figure 1 in general we can solve a problem with optimal substructure using a three step process 1 break the problem into smaller subproblems 2 solve these problems optimally using this three step process recursively 3 use these optimal solutions to construct an optimal solution for the original problem the subproblems are themselves solved by dividing them into sub subproblems and so on until we reach some simple case that is solvable in constant time figure 2 the subproblem graph for the fibonacci sequence that it is not a tree but a dag indicates overlapping subproblems to say that a problem has overlapping subproblems is to say that the same subproblems are used to solve many different larger problems for example in the fibonacci sequence f3  f1  f2 and f4  f2  f3  computing each number involves computing f2 because both f3 and f4 are needed to compute f5 a naive approach to computing f5 may end up computing f2 twice or more this applies whenever overlapping subproblems are present a naive approach may waste time recomputing optimal solutions to subproblems it has already solved in order to avoid this we instead save the solutions to problems we have already solved then if we need to solve the same problem later we can retrieve and reuse our already computed solution this approach is called memoization not memorization although this term also fits  if we are sure we won t need a particular solution anymore we can throw it away to save space in some cases we can even compute the solutions to subproblems we know that we ll need in advance
orig_taske.txt
dynamic programming is an algorithm design technique used for optimisation problems such as minimising or maximising like divide and conquer dynamic programming solves problems by combining solutions to sub problems however unlike divide and conquer sub problems are not always independent as sub problems may share sub sub problems but solution to one sub problem may not affect the solutions to other sub problems of the same problem  there are four steps in dynamic programming  1 characterise structure of an optimal solution  2 define value of optimal solution recursively  3 compute optimal solution values either top down with caching or bottom up in a table  4 construct an optimal solution from computed values  an example of the type of problem for which dynamic programming may be used is given two sequences x x1 xm and y y1 yn find a common subsequence whose length is maximum  dynamic programming reduces computation by solving sub problems in a bottom up fashion and by storing solution to a sub problem the first time it is solved also looking up the solution when a sub problem is encountered again helps reduce computation however the key in dynamic programming is to determine the structure of optimal solutions
['1940s', '1953', 'acceptable', 'action', 'adjacent', 'advance', 'affect', 'after', 'again', 'algorithm', 'all', 'already', 'also', 'although', 'always', 'an', 'analysis', 'and', 'another', 'anymore', 'applies', 'approach', 'are', 'as', 'at', 'avoid', 'away', 'be', 'because', 'bellman', 'below', 'best', 'both', 'bottom', 'break', 'but', 'by', 'caching', 'called', 'can', 'case', 'cases', 'central', 'characterise', 'combining', 'comes', 'common', 'computation', 'compute', 'computed', 'computer', 'computing', 'connection', 'conquer', 'constant', 'construct', 'contribution', 'dag', 'decisions', 'define', 'describe', 'described', 'design', 'determine', 'different', 'divide', 'dividing', 'down', 'dynamic', 'each', 'either', 'encountered', 'end', 'engineering', 'equation', 'even', 'events', 'example', 'exhibit', 'exhibition', 'f1', 'f2', 'f3', 'f4', 'f5', 'fashion', 'fibonacci', 'field', 'figure', 'finalized', 'find', 'finding', 'first', 'fits', 'for', 'form', 'found', 'founded', 'four', 'from', 'general', 'given', 'goal', 'graph', 'had', 'has', 'have', 'he', 'helps', 'however', 'ieee', 'if', 'in', 'independent', 'indicates', 'instance', 'instead', 'into', 'involves', 'is', 'it', 'key', 'know', 'larger', 'later', 'length', 'less', 'like', 'll', 'looking', 'many', 'mathematical', 'mathematics', 'maximising', 'maximum', 'may', 'meaning', 'means', 'memoization', 'memorization', 'method', 'methods', 'minimising', 'modern', 'more', 'much', 'naive', 'name', 'need', 'needed', 'needs', 'no', 'not', 'number', 'of', 'on', 'one', 'optimal', 'optimally', 'optimisation', 'optimization', 'or', 'order', 'original', 'originally', 'other', 'our', 'overall', 'overlapping', 'particular', 'path', 'pick', 'plan', 'present', 'problem', 'problems', 'process', 'produced', 'program', 'programming', 'properties', 'reach', 'recognized', 'recomputing', 'recursive', 'recursively', 'reduce', 'reduces', 'refined', 'remembered', 'restates', 'result', 'retrieve', 'reuse', 'richard', 'same', 'save', 'say', 'schedule', 'science', 'sense', 'sequence', 'sequences', 'share', 'shortest', 'shown', 'simple', 'smaller', 'so', 'solution', 'solutions', 'solvable', 'solve', 'solved', 'solves', 'solving', 'some', 'sometimes', 'space', 'step', 'steps', 'storing', 'structure', 'sub', 'subproblem', 'subproblems', 'subsequence', 'substructure', 'such', 'sure', 'synonym', 'systems', 'table', 'takes', 'technique', 'term', 'than', 'that', 'the', 'them', 'themselves', 'then', 'there', 'these', 'this', 'three', 'throw', 'thus', 'time', 'to', 'top', 'topic', 'tree', 'twice', 'two', 'type', 'unlike', 'until', 'up', 'use', 'used', 'using', 'value', 'values', 'vertex', 'vertices', 'was', 'waste', 'we', 'when', 'whenever', 'where', 'which', 'whose', 'with', 'won', 'word', 'x1', 'xm', 'y1', 'yn']
[1 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1
 0 1 1 1 1 1 0 0 1 0 0 1 1 1 1 1 0 1 1 1 1 1 0 1 1 0 0 1 0 1 0 1 1 0 0 1 1
 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 0 0 1
 1 1 0 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 0 1 1 1 0 0 1 1 1 1 1 1 1 0 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 0
 0 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 0 0 0 1 1
 1 1 1 0 0 1 1 1 1 1 0 1 1 1 0 1 1 1 0 0 0 0]
[0 0 0 0 0 0 1 0 1 1 0 0 1 0 1 1 0 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 1 0 1 1
 1 0 0 0 0 0 1 1 0 1 1 1 1 0 0 0 1 0 1 0 0 0 1 0 0 1 1 0 1 0 1 1 0 1 1 0 0
 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 1 0 0 0 1 1 0 1 0 0 0 0 0 0 1 1 0
 0 1 1 0 0 0 0 0 1 1 1 0 0 0 1 0 1 0 1 0 0 0 1 1 1 0 0 0 0 0 0 1 0 0 0 0 0
 0 0 0 0 1 0 1 0 1 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0
 1 1 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 1 1 0 0 1 1 1 0 0 0 0 1 1
 1 1 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 1 1 0 0 0 1 1 1 0 1
 0 1 0 1 1 0 0 0 0 0 1 0 0 1 1 1 0 0 1 1 1 1]
[0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 1 0 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 1 1
 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0
 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0
 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 1 0 1 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0
 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 0
 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1
 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0]
